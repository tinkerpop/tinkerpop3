[[traversal]]
The Traversal
=============

image::gremlin-running.png[width=125]

At the most general level there is `Traversal<S,E>` which implements `Iterator<E>`, where the `S` stands for start and the `E` stands for end. A traversal is composed of four primary components:
  
 . `Step<S,E>`: a individual function applied to `S` to yield `E`.
 . `TraversalStrategy`: interceptor methods to alter the execution of the traversal.
 . `Traversal.SideEffects`: key/value pairs that can be used to store global information about the traversal.
 . `Traverser<T>`: the object propagating through the `Traversal` currently representing an object of type `T`. 

The classic notion of a graph traversal is provided by `GraphTraversal<S,E>` which extends `Traversal<S,E>`.

[[graph-traversal-steps]]
Graph Traversal Steps
---------------------

image::step-types.png[width=650]

A `GraphTraversal<S,E>` can be spawned off of a Graph, Vertex, or an Edge. A graph traversal is composed of an ordered list of steps. Each step is of particular general form as diagrammed above. A list of all the steps (and their descriptions) are provided in the TinkerPop3 link:http://www.tinkerpop.com/javadocs/current/com/tinkerpop/gremlin/process/graph/GraphTraversal.html[GraphTraversal JavaDoc]. A few of the more interesting/complex steps are presented in the following subsections.

[[lambda-steps]]
Lambda Steps
~~~~~~~~~~~~

There are four generic steps by which all other specific steps described later extend.

[width="100%",cols="10,12",options="header"]
|=========================================================
| Step| Description
| `map(Function<Traverser<S>, E>)` | map the traverser to some object of type `E` for the next step to process.
| `flatMap(Function<Traverser<S>, Iterator<E>>)` | map the traverser to an iterator of `E` objects that are streamed to the next step.
| `filter(Predicate<Traverser<S>>)` | map the traverser to either true or false, where false will not pass the traverser to the next step.
| `sideEffect(Consumer<Traverser<S>>)` | perform some operation on the traverser and pass it to the next step.
|=========================================================

The `Traverser<S>` object provides access to:

. The current traversed `S` object -- `Traverser.get()`.
. The current path traversed by the traverser -- `Traverser.getPath()`.
. The number of times the traverser has gone through a loop -- `Traverser.getLoops()`.
. The side-effects associated with the traversal -- `Traverser.getSideEffects()`.
. A helper shorthand to get a particular side-effect -- `Traverser.get(String) == Traverser.getSideEffects().get(String)`.

IMPORTANT: If a specific traversal step can do the necessary step-computation, use it. Lambda steps can not be optimized by the Gremlin <<traversalstrategy,traversal strategies>> and should only be used when the requisite computation does not have a corresponding standard Gremlin step. For example, instead of `filter{it.property('name').isPresent()}` use `has('name')`.

image:map-lambda.png[width=150,float=right]
[source,groovy]
gremlin> g.v(1).as('a').out() <1>
==>v[3]
==>v[2]
==>v[4]
gremlin> g.v(1).as('a').out().map{it.get('a')} <2>
==>v[1]
==>v[1]
==>v[1]
gremlin> g.v(1).as('a').out.back('a') <3>
==>v[1]
==>v[1]
==>v[1]

<1> A standard outgoing traversal from vertex 1.
<2> For each vertex outgoing adjacent to vertex 1, get the vertex at `a` (which is vertex 1).
<3> The <<back-step,`back()`-step>> is implemented as a `map()`-step that accesses side effects.

image:filter-lambda.png[width=160,float=right]
[source,groovy]
gremlin> g.V().filter{it.get().property('age').isPresent()} <1>
==>v[1]
==>v[2]
==>v[4]
==>v[6]
gremlin> g.V().has('age') <2>
==>v[1]
==>v[2]
==>v[4]
==>v[6]

<1> A filter that only allows the vertex to pass if it has an age property.
<2> The more specific `has()`-step is implemented as a `filter()` with respective predicate.


image:side-effect-lambda.png[width=175,float=right]
[source,groovy]
gremlin> g.V().has('age').sideEffect{println it} <1>
v[1]
==>v[1]
v[2]
==>v[2]
v[4]
==>v[4]
v[6]
==>v[6]

<1> Whatever enters sideEffect is passed to the next step, but some intervening process can occur.


[[addedge-step]]
AddEdge Step
~~~~~~~~~~~~

image::addedge-step.png[width=450]

link:http://en.wikipedia.org/wiki/Automated_reasoning[Reasoning] is the process of making explicit in the data was is implicit in the data. What is explicit in a graph are the objects of the graph -- i.e. vertices and edges. What is implicit in the graph is the traversal. In other words, traversals expose meaning where the meaning is defined by the traversal description. For example, take the concept of a "co-developer." Two people are co-developers if they have worked on the same project together. This concept can be represented as a traversal and thus, the concept of "co-developers" can be derived. This is made possible with `addE()`-step.

[source,groovy]
gremlin> g.v(1).as('a').out('created')
==>v[3]
gremlin> g.v(1).as('a').out('created').in('created')
==>v[1]
==>v[4]
==>v[6]
gremlin> g.v(1).as('a').out('created').in('created').except('a') // marko can't be a co-developer with himself
==>v[4]
==>v[6]
gremlin> g.v(1).as('a').out('created').in('created').except('a').addBothE('co-developer','a')
==>v[4]
==>v[6]
gremlin> g.v(1).out('co-developer').value('name')
==>josh
==>peter
gremlin> g.v(1).out('co-developer').in('co-developer')
==>v[1]
==>v[1]

Note that it is possible to add an arbitrary number of key/value pairs (i.e. Object var args) to the `addE` steps to have those attached as properties to the created edges. 


[[aggregate-step]]
Aggregate Step
~~~~~~~~~~~~~~

image::aggregate-step.png[width=800]

The `aggregate()`-step (*sideEffect*) is used to aggregate all the objects at a particular point of traversal into a Collection. The step uses link:http://en.wikipedia.org/wiki/Eager_evaluation[eager evaluation] in that no objects continue on until all previous objects have been fully aggregated (as opposed to <<store-step,`store()`>> which link:http://en.wikipedia.org/wiki/Lazy_evaluation[lazily] fills a collection). The eager evaluation nature is crucial in situations where everything at a particular point is required for future computation. An example is provided below.

[source,groovy]
gremlin> g.v(1).out('created') // what has marko created?
==>v[3]
gremlin> g.v(1).out('created').aggregate('x') // aggregate all his creations
==>[v[3]]
gremlin> g.v(1).out('created').aggregate('x').in('created') // who are marko's collaborators
==>v[1]
==>v[4]
==>v[6]
gremlin> g.v(1).out('created').aggregate('x').in('created').out('created') // what have marko's collaborators created?
==>v[3]
==>v[5]
==>v[3]
==>v[3]
gremlin> g.v(1).out('created').aggregate('x').in('created').out('created').except('x').value('name') // what have marko's collaborators created that he hasn't created?
==>ripple

In link:http://en.wikipedia.org/wiki/Recommender_system[recommendation systems], the above pattern is used:
	
	"What has userA liked? Who else has liked those things? What have they liked that userA hasn't already liked?"


[[back-step]]
Back Step
~~~~~~~~~

link:http://en.wikipedia.org/wiki/Functional_programming[Functional languages] make use of function composition and lazy evaluation to create complex computations from primitive operations. This is exactly what Gremlin `GraphTraversal` does. One of the differentiating aspects of Gremlin's data flow approach to graph processing is that the flow need not always go "forward," but in fact, can go back to a previously seen area of computation. Examples include <<jump-step,`jump()`>> as well as the `back()`-step (*branch*).

[source,groovy]
gremlin> g.V().out().out()
==>v[5]
==>v[3]
gremlin> g.V().out().out().path()
==>[v[1], v[4], v[5]]
==>[v[1], v[4], v[3]]
gremlin> g.V().as('x').out().out().back('x')
==>v[1]
==>v[1]
gremlin> g.V().out().as('x').out().back('x')
==>v[4]
==>v[4]
gremlin> g.V().out().out().as('x').back('x') // pointless
==>v[5]
==>v[3]

[[choose-step]]
Choose Step
~~~~~~~~~~~

The `choose()`-step (*branch*) allows for the current `Traverser<T>` to select which traversal branch to take. With `choose()`, it is possible to implement if/else-based semantics.

[source,groovy]
gremlin> g.V().has('age').value('name').map{[it.get(), it.get().length()]}
==>[marko, 5]
==>[vadas, 5]
==>[josh, 4]
==>[peter, 5]
gremlin> g.V().has('age').filter{it.get().value('name').length() == 5}.in().value('name')
==>marko
gremlin> g.V().has('age').filter{it.get().value('name').length() == 4}.out().value('name')
==>ripple
==>lop

Given the facts above, the following examples show how to use `choose()` to select the values.

image::choose-step.png[width=700]

[source,groovy]
gremlin> g.V().has('age').choose({it.get().value('name').length() == 5},   // If the predicate is true, then do `in`, else do `out`.
  g.of().in(),
  g.of().out()).value('name')
==>marko
==>ripple
==>lop
gremlin> g.V().has('age').choose({it.get().value('name').length()},   // Use the result of the function as a key to the map of traversal choices.
  [5:g.of().in(),
   4:g.of().out()]).value('name')
==>marko
==>ripple
==>lop

In Java8, there is no elegant syntax to create a `Map`. Thus, the last traversal above would look as follows:

[source,java]
g.V().has("age").choose(v -> v.get().value("name").length(), new HashMap() {{
  put(5,g.of().in());
  put(4,g.of().out());
}}).value("name")

[[groupby-step]]
GroupBy Step
~~~~~~~~~~~~

As traversers propagate across a graph as defined by a traversal, sideEffect computations are sometimes required. That is, the actually path taken or the current location of a traverser is not the ultimate output of the computation, but some other representation of the traversal. The `groupBy()`-step (*sideEffect*) is one such sideEffect that organizes the objects according to some function of the object. Then, if required, that organization (a list) is reduced. An example is provided below.

[source,groovy]
gremlin> g.V.groupBy{it.value('name')[0]}   // group the vertices by the first letter of their name
==>[p:[v[6]], r:[v[5]], v:[v[2]], j:[v[4]], l:[v[3]], m:[v[1]]]
gremlin> g.V.groupBy{it.value('name')[0]}{it.value('name')}   // for each vertex in the group, get their name (now the name[1] is apparent)
==>[p:[peter], r:[ripple], v:[vadas], j:[josh], l:[lop], m:[marko]]
gremlin> g.V.groupBy{it.value('name')[0]}{it.value('name')}{it.size()}   // for each grouping, what is it's size?
==>[p:1, r:1, v:1, j:1, l:1, m:1]

The three lambda parameters of `groupBy` are discussed below.

. Key-lambda: What feature of the object to group on (a function that yields the map key)?
. Value-lambda: What feature of the group to store in the key-list?
. Reduce-lambda: What feature of the key-list to ultimately return?

[[groupcount-step]]
GroupCount Step
~~~~~~~~~~~~~~~

When it is important to know how many times a particular object has been at a particular part of a traversal, `groupCount()`-step (*sideEffect*) is used.

	"What is the distribution of ages in the graph?"

[source,groovy]
gremlin> g.V().has('age').value('age').groupCount()
==>[32:1, 35:1, 27:1, 29:1]
gremlin> g.V().has('age').groupCount{it.get().value('age')} // you can also supply a pre-group lambda
==>[32:1, 35:1, 27:1, 29:1]

There is one person that is 32, one person that is 35, one person that is 27, and one person that is 29.

	"Iteratively walk the graph and count the number of times you see the second letter of each name."

image::groupcount-step.png[width=500]

[source,groovy]
gremlin> g.V().as('x').both().groupCount('m'){it.get().value('name')[1]}.jump('x',10).cap('m')
==>[a:19598, e:5740, i:5740, o:27716]

The above is interesting in that it demonstrates the use of referencing the internal `Map<Object,Long>` of `groupCount` with a string variable. Given that `groupCount` is a sideEffect-step, it simply passes the object it received to its output. Internal to `groupCount`, the object's count is incremented. If `groupCount` is the last step in the traversal, the `SideEffectCapStrategy` (see <<traversalstrategy,Traversal Strategy>>) automatically returns the internal map. However, if the `groupCount` is not the last step, then the sideEffect data structure (i.e. the internal map of `groupCount`) can be accessed with `cap`-step by referencing the desired variable.

[[inject-step]]
Inject Step
~~~~~~~~~~~

image::inject-step.png[width=800]

One of the major features of TinkerPop3 is "injectable steps." This makes it possible to insert objects arbitrarily into a traversal stream. This is how <<jump-step,jump()>> is implemented. In general, `inject()`-step exists and a few examples are provided below.

[source,groovy]
gremlin> g.v(4).out().value('name').inject('daniel')
==>ripple
==>lop
==>daniel
gremlin> g.v(4).out().value('name').inject('daniel').map{it.get().length()}
==>6
==>3
==>6
gremlin> g.v(4).out().value('name').inject('daniel').map{it.get().length()}.path()
==>[v[4], v[5], ripple, 6]
==>[v[4], v[3], lop, 3]
==>[daniel, 6]

In the last example above, note that the path starting with `daniel` is only of length 2. This is because the `daniel` string was inserted half-way in the traversal. Finally, a typical use case is provided below -- when the start of the traversal is not a graph object.

[source,groovy]
gremlin> g.of().inject(1,2)
==>1
==>2
gremlin> g.of().inject(1,2).map{it.get() + 1}
==>2
==>3
gremlin> g.of().inject(1,2).map{it.get() + 1}.map{g.v(it.get())}.value('name')
==>vadas
==>lop

[[jump-step]]
Jump Step
~~~~~~~~~

TinkerPop3 introduces the `jump()`-step (*branch*). This step allows the propagating traverser object to jump to any arbitrary section of the `Traversal`. Typically, this is determined by means of a predicate. In particular, with `jump`, the Gremlin is no longer constrained to *do-while* semantics, but can as well support *while-do* (see link:http://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html[Java Documentation on While]). Below are some examples of `jump` in action in Gremlin-Groovy.

[source,groovy]
gremlin> g.v(1).as('a').out().jump('a'){it.loops<2}.value('name') <1>
==>ripple
==>lop
gremlin> g.v(1).as('a').jump('b'){it.loops>1}.out().jump('a').as('b').value('name') <2>
==>ripple
==>lop
gremlin> g.v(1).jump('a').out().out().out().as('a').value('name') <3>
==>marko

<1> do-while semantics as found in the classic `loop()`-step in TinkerPop2.
<2> while-do semantics as introduced in TinkerPop3. Jump to step `b` if loops greater than 1 else, `out` and jump back to `a` (see  <<until-step,`until()`>>).
<3> a non-predicate based jump where `out.out.out` is seen as inert code.

If a predetermined number of loops is known, it is possible to avoid the use of the jump-predicate.

[source,groovy]
gremlin> g.v(1).as('a').out().jump('a',2).value('name')
==>ripple
==>lop

The `jump()`-step also supports an "emit predicate." Whereby the traverser is split in two -- the traverser exits the code block as well as continues back within the code block.

[source,groovy]
gremlin> g.v(1).as('a').out().jump('a'){it.loops<2}{true}.value('name')
==>lop
==>vadas
==>josh
==>ripple
==>lop

image::jump-step.png[width=500]

The first time through the jump-sequence, the vertices lop, vadas, and josh are seen. Given that the loops==0, then traverser jumps back to step `a`. However, because the emit-predicate is declared true, those vertices are emitted from jump-sequence. At step 2 (loops==1), the vertices traversed are ripple and lop (Josh's created projects, as lop and vadas have no out edges) and are also emitted. loops==1 now so the traverser jumps back to step `a`. As ripple and lop have no out edges there are no vertices to traverse. Given that the loops==2 now it wil fail the predicate. Therefore, the traverser has seen the vertices: lop, vadas, josh, ripple, and lop.

The `jump()`-step highlights one of the major benefits of `Traverser<T>` in TinkerPop3: the ability to take a traverser and place it anywhere in the Traversal step-sequence. Because a traverser maintains all the metadata associated with its particular walk, and no step maintains state information about a traverser, traversers can be arbitrarily relocated without ill-effects.

[[match-step]]
Match Step
~~~~~~~~~~

The `match()`-step (*map*) is introduced into TinkerPop3 to support a more link:http://en.wikipedia.org/wiki/Declarative_programming[declarative] form of link:http://en.wikipedia.org/wiki/Pattern_matching[pattern matching]. Similar constructs were available in previous TinkerPop versions via the `table()`-step, but that has since been removed in favor of the `match().select()`-pattern. With MatchStep in TinkerPop, a query optimizer similar to the link:http://www.knowledgefrominformation.com/2011/04/16/budget-match-cost-effective-subgraph-matching-on-large-networks/[budget match algorithm] builds and revises query plans on the fly, while a query is in progress. For very large graphs, where the developer is uncertain of the statistics of the graph (e.g. how many `knows`-edges vs. `worksFor`-edges exist in the graph), it is advantageous to use `match()`, as an optimal plan will be determined automatically.  Furthermore, some queries are much easier to express via `match()` than with single-path traversals.

	"Who created a project named 'lop' that was also created by someone who is 29 years old? Return the two creators."

image::match-step.png[width=500]

[source,groovy]
gremlin> g.V().match('a',
            g.of().as('a').out('created').as('b'),
            g.of().as('b').has('name', 'lop'),
            g.of().as('b').in('created').as('c'),
            g.of().as('c').has('age', 29)).
          select(['a', 'c']){it.value('name')} 
==>[a:marko, c:marko]
==>[a:josh, c:marko]
==>[a:peter, c:marko]

Note that the above can also be more concisely written as below which demonstrates that imperative inner-traversals can be arbitrarily defined.

[source,groovy]
gremlin> g.V().match('a',
            g.of().as('a').out('created').has('name', 'lop').as('b'),
            g.of().as('b').in('created').has('age', 29).as('c')).
          select(['a', 'c']){it.value('name')} 
==>[a:marko, c:marko]
==>[a:josh, c:marko]
==>[a:peter, c:marko]


MatchStep brings functionality similar to link:http://en.wikipedia.org/wiki/SPARQL[SPARQL] to Gremlin. Like SPARQL, MatchStep conjoins a set of patterns applied to a graph.  For example, the following traversal finds exactly those songs which Jerry Garcia has both sung and written (using the Grateful Dead graph distributed in the `data/` directory):  

[source,groovy]
gremlin> g = TinkerGraph.open()
==>tinkergraph[vertices:0 edges:0]
gremlin> g.loadGraphML('data/grateful-dead.xml')
==>null
gremlin> g.V().match('a',
            g.of().as('a').has('name', 'Garcia'),
            g.of().as('a').in('writtenBy').as('b'),
            g.of().as('a').in('sungBy').as('b')).select('b').value('name')
==>CREAM PUFF WAR
==>CRYPTICAL ENVELOPMENT

Among the features which differentiate `match()` from SPARQL are:

[source,groovy]
gremlin> g.V().match('a',
            g.of().as('a').out('created').has('name','lop').as('b'), <1>
            g.of().as('b').in('created').has('age', 29).as('c'),
            g.of().as('c').out().jump('c',2)). <2>
           select('c').out('knows').dedup().value('name') <3>
==>vadas
==>josh

<1> *Patterns of arbitrary complexity*: `match()` is not restricted to triple patterns or property paths.
<2> *Recursion support*: `match()` supports the branch-based steps within a pattern, including `jump()`.
<3> *Imperative/declarative hybrid*: Pre and prior to a `match()`, it is possible to leverage classic Gremlin imperative.

To extend point #3, it is possible to support going from imperative, to declarative, to imperative, ad infinitum.

[source,groovy]
gremlin> g.V().match('a',
            g.of().as('a').out('knows').as('b'),
            g.of().as('b').out('created').has('name','lop')).
          select('b').
          out('created').
          match('a',
            g.of().as('a').in('created').as('b'),
            g.of().as('b').out('knows').as('c')).
          select('c').value('name')
==>vadas
==>josh

Like all other steps in Gremlin, `match()` is a function and thus, `match()` within `match()` is a natural consequence of Gremlin's functional foundation (i.e. recursive matching).

[source,groovy]
gremlin> g.V().match('a',
            g.of().as('a').out('knows').as('b'),
            g.of().as('b').out('created').has('name','lop'),
            g.of().as('b').match('x',
                g.of().as('x').out('created').as('y'),
                g.of().as('y').has('name','ripple')).select('y').as('c')).
            select(['a','c']){it.value('name')}
==>[a:marko, c:ripple]

WARNING: Currently, `match()` does not operate within a multi-JVM <<graphcomputer,GraphComputer>> OLAP environment. Future work includes a linearization <<traversalstrategy,TraversalStrategy>> for `match()`.

[[using-where-with-match]]
Using Where with Match
^^^^^^^^^^^^^^^^^^^^^^

Match is typically used in conjunction with both `select()` (demonstrated previously) and `where()` (presented here). A `where()` allows the user to further constrain the result set provided by `match()`.

[source,groovy]
gremlin> g.V().match('a',
            g.of().as('a').out('created').as('b'),
            g.of().as('b').in('created').as('c')).
              where('a', neq, 'c').
               select(['a','c']){it.value('name')}
==>[a:marko, c:josh]
==>[a:marko, c:peter]
==>[a:josh, c:marko]
==>[a:josh, c:peter]
==>[a:peter, c:marko]
==>[a:peter, c:josh]

The `where()`-step can take either a `BiPredicate` (first example below) or a `Traversal` (second example below). Using `MatchWhereStrategy`, `where()`-clauses can be automatically folded into `match()` and thus, subject to `match()`-steps budget-match algorithm.

[source,groovy]
gremlin> traversal = g.V().match('a',
            g.of().as('a').out('created').as('b'),
            g.of().as('b').in('created').as('c')).
              where(g.of().as('a').out('knows').as('c')). <1>
               select(['a','c']){it.value('name')}; null <2>
==>null
gremlin> traversal.toString()
==>[TinkerGraphStep(vertex), MatchStep, WhereStep, SelectStep] <3>
gremlin> traversal.strategies().apply()
==>null
gremlin> traversal.toString()
==>[TinkerGraphStep(vertex), MatchStep, SelectStep] <4>
gremlin> traversal <5>
==>[a:marko, c:josh] <6>

<1> A `where()`-step with a traversal containing variable bindings declared in `match()`.
<2> A useful trick to ensure that that the traversal is not iterated by Gremlin Console.
<3> The string representation of the traversal prior to its strategies being applied.
<4> The string representation of the traversal after the strategies have been applied (and thus, `where()` is folded into `match()`)
<5> The Gremlin Console will automatically iterate anything that is an iterator or is iterable.
<6> Both marko and josh are co-developers and marko knows josh.

[[path-step]]
Path Step
~~~~~~~~~

A traverser is transformed as it moves through a series of steps within a `Traversal`. The history of the traverser is realized by examining its path with `path()`-step (*map*).

image::path-step.png[width=650]

[source,groovy]
gremlin> g.V().out().out().value('name')
==>ripple
==>lop
gremlin> g.V().out().out().value('name').path()
==>[v[1], v[4], v[5], ripple]
==>[v[1], v[4], v[3], lop]

If edges are required in the path, then be sure to traverser those edges explicitly.

[source,groovy]
gremlin> g.V().outE().inV().outE().inV().path()
==>[v[1], e[8][1-knows->4], v[4], e[10][4-created->5], v[5]]
==>[v[1], e[8][1-knows->4], v[4], e[11][4-created->3], v[3]]

It is possible to provide a var args of lamdas to post-process the elements of the path in a round-robin fashion.

[source,groovy]
gremlin> g.V().out().out().path{it.value('name')}{it.value('age')}
==>[marko, 32, ripple]
==>[marko, 32, lop]

Finally, because of lambda post-processing, nothing prevents the lamda from tiggering yet another traversal. In the traversal below, for each element of the path traversed thus far, if its a person (as determined by having an `age`-property), then get all of their creations, else if its a creation, get all the people that created it.

[source,groovy]
gremlin> g.V().out().out().path{
  it.choose({it.get().has('age').hasNext()}, 
    g.of().out('created').value('name'),
    g.of().in('created').value('name')).toList()}
==>[[lop], [ripple, lop], [josh]]
==>[[lop], [ripple, lop], [marko, josh, peter]]

WARNING: Generating path information is expensive as the history of the traverser is stored into a Java list. With numerous traversers, there are numerous lists. Moreover, in an OLAP <<graphcomputer,`GraphComputer`>> environment this becomes exceedingly prohibitive as there are traversers emanating from all vertices in the graph in parallel. In OLAP there are optimizations provided for traverser populations, but when paths are calculated (and each traverser is unique due to its history), then these optimizations are no longer possible.

[[path-data-structure]]
Path Data Structure
^^^^^^^^^^^^^^^^^^^

The `Path` data structure is an ordered list of objects, where each object is associated to a `Set<String>` of labels. An example is presented below to demonstrate both the `Path` API as well as how a traversal yields labeled paths.

image::path-data-structure.png[width=350]

[source,groovy]
gremlin> path = g.v(1).as('a').has('name').as('b').out('knows').out('created').as('c').has('name','ripple').value('name').as('d').identity().as('e').path().next()
==>[v[1], v[4], v[5], ripple]
gremlin> path.size()
==>4
gremlin> path.objects
==>v[1]
==>v[4]
==>v[5]
==>ripple
gremlin> path.labels
==>[a, b]
==>[]
==>[c]
==>[d, e]
gremlin> path.a
==>v[1]
gremlin> path.b
==>v[1]
gremlin> path.c
==>v[5]
gremlin> path.d == path.e
==>true

[[select-step]]
Select Step
~~~~~~~~~~~

There are two use cases for `select()`-step (*map*).

. Select labeled steps within a path (as defined by `as()` in a traversal).
. Select objects out of a `Map<String,Object>` flow (i.e. a sub-map).

The first use case is demonstrated via example below.

[source,groovy]
gremlin> g.V().as('a').out().as('b').out().as('c') // no select
==>v[5]
==>v[3]
gremlin> g.V().as('a').out().as('b').out().as('c').select()
==>[a:v[1], b:v[4], c:v[5]]
==>[a:v[1], b:v[4], c:v[3]]
gremlin> g.V().as('a').out().as('b').out().as('c').select(['a','b'])
==>[a:v[1], b:v[4]]
==>[a:v[1], b:v[4]]
gremlin> g.V().as('a').out().as('b').out().as('c').select(['a','b']){it.value('name')}
==>[a:marko, b:josh]
==>[a:marko, b:josh]
gremlin> g.V().as('a').out().as('b').out().as('c').select('a') // if the selection is one step, no map is returned
==>v[1]
==>v[1]

The second use case is best understood in terms of <<match-step,`match()`-step>> where the result of `match()` is a `Map<String,Object>` of variable bindings. However, any step that emits a `Map<String,Object>` can be selected. A contrived example is presented below.

[source,groovy]
gremlin> g.V()[0..1].as('a').map{[b:1,c:2]} <1>
==>[b:1, c:2]
==>[b:1, c:2]
gremlin> g.V()[0..1].as('a').map{[b:1,c:2]}.select() <2>
==>[a:v[1], b:1, c:2]
==>[a:v[2], b:1, c:2]
gremlin> g.V()[0..1].as('a').map{[b:1,c:2]}.select(['a','c']) <3>
==>[a:v[1], c:2]
==>[a:v[2], c:2]
gremlin> g.V()[0..1].as('a').map{[b:1,c:2]}.select('c') <4>
==>2
==>2

<1> A contrived example to create a `Map<String,Object>` flow as a foundation for the examples to follow.
<2> Select will grab both labeled steps and `Map<String,Object>` entries.
<3> The same `List<String>` selectivity can be used as demonstrated in the previous example.
<4> If a single selection is used, then the object is emitted not wrapped in a map. Useful for continuing the traversal process without having to do a map projection.

[[using-where-with-select]]
Using Where with Select
^^^^^^^^^^^^^^^^^^^^^^^

Finally, like <<match-step,`match()`-step>>, it is possible to use `where()`, as where is a filter that processes `Map<String,Object>` streams.

[source,groovy]
gremlin> g.V().as('a').out('created').in('created').as('b').select{it.value('name')} <1>
==>[a:marko, b:marko]
==>[a:marko, b:josh]
==>[a:marko, b:peter]
==>[a:josh, b:josh]
==>[a:josh, b:marko]
==>[a:josh, b:josh]
==>[a:josh, b:peter]
==>[a:peter, b:marko]
==>[a:peter, b:josh]
==>[a:peter, b:peter]
gremlin> g.V().as('a').out('created').in('created').as('b').
           select{it.value('name')}.
             where('a',neq,'b') <2>
==>[a:marko, b:josh]
==>[a:marko, b:peter]
==>[a:josh, b:marko]
==>[a:josh, b:peter]
==>[a:peter, b:marko]
==>[a:peter, b:josh]
gremlin> g.V().as('a').out('created').in('created').as('b').select(). <3>
              where('a',neq,'b').
              where(g.of().as('a').out('knows').as('b')).
                select{it.value('name')}
==>[a:marko, b:josh]

<1> A standard `select()` that generates a `Map<String,Object>` of variables bindings in the path (i.e. `a` and `b`) for the sake of a running example.
<2> The `select{it.value('name')}` projects each binding vertex to their name property value and `where()` operates to ensure respective `a` and `b` strings are not the same.
<3> The first `select()` projects a vertex binding set. A binding is filtered if `a` vertex equals `b` vertex. A binding is filtered if `a` doesn't know `b`. The second and final `select()` projects the name of the vertices.

[[store-step]]
Store Step
~~~~~~~~~~

When link:http://en.wikipedia.org/wiki/Lazy_evaluation[lazy] aggregation is needed, `store()`-step (*sideEffect*) should be used over <<aggregate-step,`aggregate()`>>. The two steps differ in that `store()` does not block and only stores objects in its side-effect collection as they pass through.

[source,groovy]
gremlin> g.V().aggregate('x').range(0,1).cap('x')
==>[v[1], v[2], v[3], v[4], v[5], v[6]]
gremlin> g.V().store('x').range(0,1).cap('x')
==>[v[1], v[2], v[3]]

It is interesting to note that there are three results in the `store()` side-effect even though the interval selection is for 2 objects. Realize that when the third object is on its way to the `range()` filter (i.e. `[0..1]`), it passes through `store()` and thus, stored before filtered.

[[subgraph-step]]
Subgraph Step
~~~~~~~~~~~~~

Extracting a portion of a graph from a larger one for analysis, visualization or other purposes is a fairly common use case for graph analysts and developers. The `subgraph()`-step (*map*) provides a way to produce an edge-induced subgraph from virtually any traversal.  The following code shows how to produce the "knows" subgraph:

[source,groovy]
----
gremlin> g = TinkerFactory.createClassic()
==>tinkergraph[vertices:6 edges:6]
gremlin> sg = TinkerGraph.open() <1>
==>tinkergraph[vertices:0 edges:0]
gremlin> g.E().with('sg',sg).subgraph('sg', {it.label == 'knows'}) <2>
==>tinkergraph[vertices:3 edges:2]
gremlin> sg.E() <3>
==>e[7][1-knows->2]
==>e[8][1-knows->4]
----

<1> The empty graph to which the subgraph will be generated.
<2> As this function produces "edge-induced" subgraphs, the traversal must contain edges in the path.  Those edges found in that path are evaluated by a `Predicate` function to determine if they should be copied to the subgraph in conjunction with their associated vertices.
<3> The subgraph contains only "knows" edges.

A more common subgraphing use case is to get all of the graph structure surrounding a single vertex:

[source,groovy]
----
gremlin> g = TinkerFactory.createClassic()
==>tinkergraph[vertices:6 edges:6]
gremlin> sg = g.v(3).as('a').inE().outV().jump('a'){it.loops<3}{true}.subgraph({true}).next()   <1>
==>tinkergraph[vertices:4 edges:4]
gremlin> sg.E()
==>e[8][1-knows->4]
==>e[9][1-created->3]
==>e[11][4-created->3]
==>e[12][6-created->3]
----

<1> Starting at vertex `3`, traverse 3 steps away on in-edges, outputting all of that into the subgraph. Note that if now graph is provided, a `TinkerGraph` is assumed.

[[timelimit-step]]
TimeLimit Step
~~~~~~~~~~~~~~

In many situations, a graph traversal is not about getting an exact answer as its about getting a relative ranking. A classic example is link:http://en.wikipedia.org/wiki/Recommender_system[recommendation]. What is desired is a relative ranking of vertices, not their absolute rank. Next, it may be desirable to have the traversal execute for no more than 750 milliseconds. In such situations, `timeLimit()`-step (*filter*) can be used.

NOTE: The method `clock(int runs, Closure code)` is a utility preloaded in the <<gremlin-console,Gremlin Console>> that can be used to time execution of a body of code.

image::timelimit-step.png[width=500]

[source,groovy]
gremlin> g = TinkerFactory.createClassic()
==>tinkergraph[vertices:6 edges:6]
gremlin> g.V().as('x').both().groupCount('m').jump('x',16).cap('m').next().sort{-it.value}
==>v[1]=2744208
==>v[3]=2744208
==>v[4]=2744208
==>v[2]=1136688
==>v[5]=1136688
==>v[6]=1136688
gremlin> clock(1){g.V().as('x').both().groupCount('m').jump('x',16).cap('m').next().sort{-it.value}}
==>2735.111
gremlin> g.V().as('x').timeLimit(750).both().groupCount('m').jump('x',16).cap('m').next().sort{-it.value}
==>v[1]=648473
==>v[3]=647510
==>v[4]=647499
==>v[5]=268540
==>v[6]=268533
==>v[2]=267941
gremlin> clock(1){g.V().as('x').timeLimit(750).both().groupCount('m').jump('x',16).cap('m').next().sort{-it.value}}
==>750.03

In essence, the relative order is respected, even through the number traversers at each vertex is not. The primary benefit being that the calculation is guaranteed to complete at the specified time limit (in milliseconds). Finally, note that the internal clock of `timeLimit()`-step starts when the first traverser enters it. When the time limit is reached, any `next()` evaluation of the step will yield a `NoSuchElementException` and any `hasNext()` evaluation will yield `false`.

[[tree-step]]
Tree Step
~~~~~~~~~

From any one element (i.e. vertex or edge), the emanating paths from that element can be aggregated to form a link:http://en.wikipedia.org/wiki/Tree_(data_structure)[tree]. Gremlin provides `tree()`-step (*sideEffect*) for such this situation.

image::tree-step.png[width=450]

[source,groovy]
gremlin> tree = g.V().out().out().tree().next()
==>v[1]={v[4]={v[3]={}, v[5]={}}}

It is important to see how the paths of all the emanating traversers are united to form the tree.

image::tree-step2.png[width=500]

The resultant tree data structure can then be manipulated (see link:http://www.tinkerpop.com/javadocs/current/com/tinkerpop/gremlin/process/graph/step/util/Tree.html[Tree JavaDoc]). For the sake of demonstration, a post-processing lambda is applied in the running example below.

[source,groovy]
gremlin> tree = g.V().out().out().tree{it.value('name')}.next()
==>marko={josh={ripple={}, lop={}}}
gremlin> tree['marko']
==>josh={ripple={}, lop={}}
gremlin> tree['marko']['josh']
==>ripple={}
==>lop={}
gremlin> tree.getObjectsAtDepth(3)
==>ripple
==>lop

[[until-step]]
Until Step
~~~~~~~~~~

Gremlin provides *while-do* looping. This was demonstrated in the <<jump-step,Jump Step>> section of the documentation. However, when only using `jump()` for *while-do*, the representation can be confusing as there are numerous `jump` constructions. For the sake of simplicity, `until()`-step exists (*branch*).

[source,groovy]
gremlin> g.v(1).as('a').jump('b'){it.loops > 1}.out().jump('a').as('b').value('name') <1>
==>ripple
==>lop
gremlin> g.v(1).until('b'){it.loops > 1}.out().as('b').value('name') <2>
==>ripple
==>lop

<1> *while-do* looping using `jump()-step`.
<2> *while-do* looping using `until()-step`.

The `until()` expression in the example above states:
. Get the vertex with id 1 from the graph.
. Until the current traverser has loop'd two times, get the outgoing adjacent vertices of the current vertex of the traverser.
. When the traverser has loop'd two times, break out of the until-clause and then get the `name` of the current vertex of the traverser.


NOTE: The `until()`-step is not a "real" step. It is simply a marker that exist in the traversal. When the `UntilStrategy` is executed (see <<traversalstrategy,TraversalStrategy>>), the traversal is re-written by inserting `jump()`-steps accordingly. Thus, in the example above, the second traversal example using `until()` compiles to the first which uses `jump()`.


[[traversalstrategy]]
TraversalStrategy
-----------------

image:traversal-strategy.png[width=125,float=right] A `TraversalStrategy` can analyze a `Traversal` and mutate the traversal as it deems fit. This is useful in two situations:

 * There is a more efficient way to express the traversal at the TinkerPop3 level.
 * There is a more efficient way to express the traversal at the graph vendor level.

A simple TraversalStrategy is the `IdentityReductionStrategy` and it is a type-1 strategy defined as follows:

[source,java]
public class IdentityReductionStrategy implements TraversalStrategy.NoDependencies {
    public void apply(final Traversal traversal) {
        ((List<Step>) traversal.getSteps()).stream()
                .filter(step -> step instanceof IdentityStep
                    && !TraversalHelper.isLabeled(step))
                .collect(Collectors.<Step>toList())
                .forEach(step -> TraversalHelper.removeStep(step, traversal));
    }
}

This strategy simply removes any unlabeled `IdentityStep` steps in the Traversal as `aStep().identity().identity().bStep()` is equivalent to `aStep().bStep()`. The `NoDepedencies` interface is a marker interface that states that this strategy does not require the execution of another strategy before or after it. For those that do have dependencies, TraversalStrategy implements Comparable<TraversalStrategy> to allow a sort order of strategies prior to their evaluation.

[source,groovy]
gremlin> t = g.V().identity().identity().out(); null
==>null
gremlin> t.toString()
==>[TinkerGraphStep, IdentityStep, IdentityStep, VertexStep(OUT)]
gremlin> t.strategies().apply()         // never required by the user (automatically executed prior to evaluation)
==>null
gremlin> t.toString()
==>[TinkerGraphStep, VertexStep(OUT)]

Type-2 strategies are defined by graph vendors who implement TinkerPop3.

[source,groovy]
g.V().has('name','marko')

The expression above can be executed in a `O(|V|)` or `O(log(|V|)` fashion in <<tinkergraph-gremlin,TinkerGraph>> depending on whether there is or is not an index defined for "name."

[source,java]
TinkerGraphStepStrategy implements TraversalStrategy.NoDependency {
    public void apply(final Traversal traversal) {
        if (traversal.getSteps().get(0) instanceof TinkerGraphStep) {
            final TinkerGraphStep tinkerGraphStep = (TinkerGraphStep) traversal.getSteps().get(0);
            Step currentStep = tinkerGraphStep.getNextStep();
            while (true) {
                if (currentStep == EmptyStep.instance()
                    || TraversalHelper.isLabeled(currentStep)) 
                    break;
                if (currentStep instanceof HasStep) {
                    tinkerGraphStep.hasContainers.add(((HasStep) currentStep).hasContainer);
                    TraversalHelper.removeStep(currentStep, traversal);
                } else if (currentStep instanceof IntervalStep) {
                    tinkerGraphStep.hasContainers.add(((IntervalStep) currentStep).startContainer);
                    tinkerGraphStep.hasContainers.add(((IntervalStep) currentStep).endContainer);
                    TraversalHelper.removeStep(currentStep, traversal);
                } else if (currentStep instanceof IdentityStep) {
                    // do nothing
                } else {
                    break;
                }
                currentStep = currentStep.getNextStep();
            }
            tinkerGraphStep.generateHolderIterator(false);
        }
    }
}

The traversal is redefined by simply taking a chain of `has()`-steps and `interval()`-steps after `g.V()` (`TinkerGraphStep`) and providing them to `TinkerGraphStep`. Then its up to TinkerGraphStep to determine if an appropriate index exists. In the code below, review the `vertices()` method and note how if an index exists, for a particular `HasContainer`, then that index is first queried before the remaining `HasContainer` filters are serially applied.

[source,groovy]
gremlin> t = g.V().has('name','marko'); null
==>null
gremlin> t.toString()
==>[TinkerGraphStep, HasStep([name,EQUAL,marko])]
gremlin> t.strategies().apply()
==>null
gremlin> t.toString()
==>[TinkerGraphStep([[name,EQUAL,marko]])]

Domain Specific Languages
-------------------------

image:gremlin-quill.png[width=200,float=right] The super interface of GraphTraversal is `Traversal`. It is possible for developers to create domain specific traversals by extending Traversal. For example, a `SocialTraversal` example is provided below.

[source,java]
----
public interface SocialTraversal<S, E> extends Traversal<S, E> {

        public default SocialTraversal<S, Vertex> people() {
            return (SocialTraversal) this.addStep(new StartStep<>(this, this.sideEffects().getGraph().V().has("age")));
        }

        public default SocialTraversal<S, Vertex> people(String name) {
            return (SocialTraversal) this.addStep(new StartStep<>(this, this.sideEffects().getGraph().V().has("name", name)));
        }

        public default SocialTraversal<S, Vertex> knows() {
            final FlatMapStep<Vertex, Vertex> flatMapStep = new FlatMapStep<>(this);
            flatMapStep.setFunction(v -> v.get().out("knows"));
            return (SocialTraversal) this.addStep(flatMapStep);
        }

        public default SocialTraversal<S, Vertex> created() {
            final FlatMapStep<Vertex, Vertex> flatMapStep = new FlatMapStep<>(this);
            flatMapStep.setFunction(v -> v.get().out("created"));
            return (SocialTraversal) this.addStep(flatMapStep);
        }

        public default SocialTraversal<S, String> name() {
            MapStep<Vertex, String> mapStep = new MapStep<>(this);
            mapStep.setFunction(v -> v.get().<String>value("name"));
            return (SocialTraversal) this.addStep(mapStep);
        }

        public static <S> SocialTraversal<S, S> of(final Graph graph) {
            final SocialTraversal traversal = new DefaultSocialTraversal();
            traversal.sideEffects().setGraph(graph);
            return traversal;
        }

        public class DefaultSocialTraversal extends DefaultTraversal implements SocialTraversal { }
    }
----

This traversal definition can now be used as follows.

[source,java]
g.of(SocialTraversal.class).people("marko").knows().name()

By extending Traversal, users can create a DSL that is respective of the semantics of their data. Instead of querying in terms of vertices/edges/properties, they can query in terms of, for example, people, their friends, and their names.

